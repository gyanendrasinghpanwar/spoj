#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
#define fr(i,n) for(i=0;i<n;i++)
#define vl vector<ll>
#define vll vector<ll,ll>
#define vpl vector< pair<ll,ll> >
#define pb push_back
#define ft first
#define sd second
#define bn begin()
#define ed end()
// Author gyanendra singh panwar :

map<int,int> m;	
vector<int>v[8001];
vector<int> ::iterator itr;

int buildtree(int pre[], int in[], int start, int end)
{
	static int preindex = 0;
	if(start>end)
	return -1;
	
	int root=pre[preindex];
	int index = m[pre[preindex++]];
	
	if(start==end)
	return in[start];
	
	int left = buildtree(pre,in,start,index-1) ;
	v[root].pb(left);
	
	int right = buildtree(pre,in,index+1,end ) ;
	v[root].pb(right);
	
	return root ;
}

int postorder(int u,int post[])
{
	static int j = 0;
    if(v[u].empty())
    {
    	if(post[j++]!=u)
    	return 0;
    		
    	return 1;
	}
    
	if(v[u][0]!=-1)		
	if( !postorder(v[u][0],post) )
	return 0;
	
	if(v[u][1]!=-1)
	if( !postorder(v[u][1],post) )
	return 0;
	
	if(post[j++]!=u)
    return 0;
	
	return 1;
}
	

int main()
{
	int n,i;
	cin>>n;
	
	int pre[n],post[n],in[n];
	
	
	fr(i,n)
	cin>>pre[i];
	fr(i,n)
	cin>>post[i];
	fr(i,n)
	{
		cin>>in[i];
		m[in[i]] = i ;
	}
	
	int ans=buildtree(pre,in,0,n-1);
	
	if( postorder(pre[0],post) )
	cout<<"yes";
	else
	cout<<"no";
	
}

